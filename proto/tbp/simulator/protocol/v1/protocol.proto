syntax = "proto3";
package tbp.simulator.protocol.v1;

option go_package = "tbp/simulator/protocol/v1;protocolv1";
option java_package = "org.thousandbrains.simulator.v1";
option csharp_namespace = "ThousandBrains.Simulator.V1";

// All linear units in meters, angles in radians.
// Right-handed coordinate system.
// Quaternions use w,x,y,z (scalar-first) ordering.

message RemoveAllObjectsRequest {
}

message RemoveAllObjectsResponse {
}

message VectorXYZ {
  double x = 1;
  double y = 2;
  double z = 3;
}

message QuaternionWXYZ {
  double w = 1;
  double x = 2;
  double y = 3;
  double z = 4;
}

message AddObjectRequest {
  string name = 1;
  optional VectorXYZ position = 2;
  optional QuaternionWXYZ rotation = 3;
  optional VectorXYZ scale = 4;
  optional uint64 semantic_id = 5;
  optional uint64 primary_target_object = 6;
}

message AddObjectResponse {
  uint64 object_id = 1;
  optional uint64 semantic_id = 2;
}

message Action {
  string agent_id = 1;
}

message StepRequest {
  Action action = 1;
}

message SensorObservations {
  bytes raw = 1;
  bytes rgba = 2;
  bytes depth = 3;
  bytes semantic = 4;
  bytes semantic_3d = 5;
  bytes sensor_frame_data = 6;
  bytes world_camera = 7;
  bytes pixel_loc = 8;
}

message AgentObservations {
  map<string, SensorObservations> entries = 1;
}

message Observations {
  map<string, AgentObservations> entries = 1;
}

message SensorState {
  VectorXYZ position = 1;
  QuaternionWXYZ rotation = 2;
}

message AgentState {
  map<string, SensorState> sensors = 1;
  VectorXYZ position = 2;
  QuaternionWXYZ rotation = 3;
  optional bool motor_only_step = 4;
}

message ProprioceptiveState {
  map<string, AgentState> entries = 1;
}

message StepResponse {
  Observations observations = 1;
  ProprioceptiveState proprioceptive_state = 2;
}

message ResetRequest {
}

message ResetResponse {
  Observations observations = 1;
  ProprioceptiveState proprioceptive_state = 2;
}

message CloseRequest {
}

message CloseResponse {
}

service SimulatorService {
  rpc RemoveAllObjects (RemoveAllObjectsRequest) returns (RemoveAllObjectsResponse);
  rpc AddObject (AddObjectRequest) returns (AddObjectResponse);
  rpc Step (StepRequest) returns (StepResponse);
  rpc Reset (ResetRequest) returns (ResetResponse);
  rpc Close (CloseRequest) returns (CloseResponse);
}

