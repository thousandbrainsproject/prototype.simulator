syntax = "proto3";
package tbp.simulator.protocol.v1;

option go_package = "tbp/simulator/protocol/v1;protocolv1";
option java_package = "org.thousandbrains.simulator.v1";
option csharp_namespace = "ThousandBrains.Simulator.V1";

// All linear units in meters, angles in radians.
// Right-handed coordinate system.
// Quaternions use w,x,y,z (scalar-first) ordering.

message RemoveAllObjectsRequest {
}

message RemoveAllObjectsResponse {
}

message VectorXYZ {
  double x = 1;
  double y = 2;
  double z = 3;
}

message QuaternionWXYZ {
  double w = 1;
  double x = 2;
  double y = 3;
  double z = 4;
}

message AddObjectRequest {
  string name = 1;
  optional VectorXYZ position = 2;
  optional QuaternionWXYZ rotation = 3;
  optional VectorXYZ scale = 4;
  optional uint64 semantic_id = 5;
  optional uint64 primary_target_object = 6;
}

message AddObjectResponse {
  uint64 object_id = 1;
  optional uint64 semantic_id = 2;
}

message LookDownAction {
  string agent_id = 1;
  double rotation_degrees = 2;
  double constraint_degrees = 3;
}

message LookUpAction {
  string agent_id = 1;
  double rotation_degrees = 2;
  double constraint_degrees = 3;
}

message MoveForwardAction {
  string agent_id = 1;
  double distance = 2;
}

message MoveTangentiallyAction {
  string agent_id = 1;
  double distance = 2;
  VectorXYZ direction = 3;
}

message OrientHorizontalAction {
  string agent_id = 1;
  double rotation_degrees = 2;
  double left_distance = 3;
  double forward_distance = 4;
}

message OrientVerticalAction {
  string agent_id = 1;
  double rotation_degrees = 2;
  double down_distance = 3;
  double forward_distance = 4;
}

message SetAgentPitchAction {
  string agent_id = 1;
  double pitch_degrees = 2;
}

message SetAgentPoseAction {
  string agent_id = 1;
  VectorXYZ location = 2;
  QuaternionWXYZ rotation = 3;
}

message SetSensorPitchAction {
  string agent_id = 1;
  double pitch_degrees = 2;
}

message SetSensorPoseAction {
  string agent_id = 1;
  VectorXYZ location = 2;
  QuaternionWXYZ rotation = 3;
}

message SetSensorRotationAction {
  string agent_id = 1;
  QuaternionWXYZ rotation = 2;
}

message SetYawAction {
  string agent_id = 1;
  double rotation_degrees = 2;
}

message TurnLeftAction {
  string agent_id = 1;
  double rotation_degrees = 2;
}

message TurnRightAction {
  string agent_id = 1;
  double rotation_degrees = 3;
}

message StepRequest {
  oneof action {
    LookDownAction look_down = 1;
    LookUpAction look_up = 2;
    MoveForwardAction move_forward = 3;
    MoveTangentiallyAction move_tangentially = 4;
    OrientHorizontalAction orient_horizontal = 5;
    OrientVerticalAction orient_vertical = 6;
    SetAgentPitchAction set_agent_pitch = 7;
    SetAgentPoseAction set_agent_pose = 8;
    SetSensorPitchAction set_sensor_pitch = 9;
    SetSensorPoseAction set_sensor_pose = 10;
    SetSensorRotationAction set_sensor_rotation = 11;
    SetYawAction set_yaw = 12;
    TurnLeftAction turn_left = 13;
    TurnRightAction turn_right = 14;
  }
}

message Observations {
  message AgentObservation {
    string agent_id = 1;

    message SensorObservation {
        string sensor_id = 1;
        optional bytes raw = 2;
        optional bytes rgba = 3;
        optional bytes depth = 4;
        optional bytes semantic = 5;
        optional bytes semantic_3d = 6;
        optional bytes sensor_frame_data = 7;
        optional bytes world_camera = 8;
        optional bytes pixel_loc = 9;
    }

    repeated SensorObservation sensor_observations = 2;
  }

  repeated AgentObservation agent_observations = 1;
}

message ProprioceptiveState {
  message AgentState {
    string agent_id = 1;
    VectorXYZ position = 2;
    QuaternionWXYZ rotation = 3;
    optional bool motor_only_step = 4;

    message SensorState {
      string sensor_id = 1;
      VectorXYZ position = 2;
      QuaternionWXYZ rotation = 3;
    }

    repeated SensorState sensor_states = 5;
  }

  repeated AgentState agent_states = 1;
}

message StepResponse {
  Observations observations = 1;
  ProprioceptiveState proprioceptive_state = 2;
}

message ResetRequest {
}

message ResetResponse {
  Observations observations = 1;
  ProprioceptiveState proprioceptive_state = 2;
}

message CloseRequest {
}

message CloseResponse {
}

service SimulatorService {
  rpc RemoveAllObjects (RemoveAllObjectsRequest) returns (RemoveAllObjectsResponse);
  rpc AddObject (AddObjectRequest) returns (AddObjectResponse);
  rpc Step (StepRequest) returns (StepResponse);
  rpc Reset (ResetRequest) returns (ResetResponse);
  rpc Close (CloseRequest) returns (CloseResponse);
}

